#!/bin/bash

#
# Set today's date
#
DATE=$(date +"%Y%m%d-%T")

#
# Script constants
#
OUT_DIR=/home/ecalfonso/Android/
LOGS_DIR=./logs
AFH_CONFIG=~/AFH.txt

#
# Initialize build variables
#
AFH=0		# Upload to AFH
CDMA=0		# Build Jfltecdma
GSM=0		# Build Jfltegsm 
RELEASE=0	# Copies ota.zip to OUT_DIR
ROM=0		# Build ROM
KERNEL=0	# Build Kernel
SYNC=0		# Sync source
WIPE=0		# Fully wipe before build

#
# Bash colors
#
RED='\033[0;31m'; GRE='\033[0;32m'; NC='\033[0m'

function echoRed { # $1 - Echos red text
	echo -e "${RED}$1${NC}" 
}

function echoGreen { # $1 - Echos green text
	echo -e "${GRE}$1${NC}" 
}

function echoStatus { # $1 - What to echo
	echo " "
	echoGreen "#########################################"
	echoGreen "#"
	echoGreen "# $1"
	echoGreen "#"
	echoGreen "#########################################"
	echo " "
} # echoStatus

#
# Pushbullet Functions
#
function elapsedTime {
    END=$(date +%s.%N)
    HOUR=$(echo "(($END-$START)/3600)"|bc)
    MIN=$(echo "(($END-$START)/60)%60"|bc)
    SEC=$(echo "($END-$START)%60"|bc)

    echoGreen "Elapsed time: $HOUR hr $MIN min $SEC sec"
} # elapsedTime

function pbBeginMsg { # $1 - Build variant
	pb -s "Starting $1 build for $DEVICE @ $DATE"
} # pbBeginMsg

function pbErrorMsg {
	# $1 - Build variant
	# $2 - Where the build failed
	pb -s "$1 build failed during $2 for $DEVICE" "$(elapsedTime)"
	exit 1
} # pbErrorMsg

function pbSuccessMsg { # $1 - Build variant
	pb -s "$1 build complete for $DEVICE" "$(elapsedTime)"
} # pbSuccessMsg

#
# Building Functions
#
function setEnv {
	echoStatus "Setting Environment"

	if [ ! -f build/envsetup.sh ];
	then
		echoRed "Error setting up environment";
		pbErrorMsg " " "Environment setup"
	fi

	. build/envsetup.sh >/dev/null 2>&1
	
	# Get AFH configs
	if [ -e $AFH_CONFIG ]; then
		AFH_SERVER=`sed -n '1p' $AFH_CONFIG`
		AFH_USER=`sed -n '2p' $AFH_CONFIG`
		AFH_PASS=`sed -n '3p' $AFH_CONFIG`
	else
		echoRed "AFH Config file not found!"
	fi
} # setEnv

function syncTree {
	echoStatus "Syncing repos"

	reposync --force-sync || {
		echoRed "Error syncing repo"
		pbErrorMsg " " "Repo sync"
	}
} # syncTree

function wipeTree {
	echoStatus "Cleaning build directory"

	rm -rf ~/cm13/.ccache > /dev/null 2>&1 || { echoRed "Error removing ccache"; pbErrorMsg " " "Ccache removal"; }
	mka clean > /dev/null 2>&1 || { echoRed "Error making clean"; pbErrorMsg " " "Making Clean"; }
	if ls $LOGS_DIR/*.log 1> /dev/null 2>&1; then
		rm $LOGS_DIR/*.log
	fi
} # wipeTree

function buildROM {
	echoStatus "Starting ROM build"
	lunch cm_$DEVICE-userdebug >/dev/null 2>&1
	mka otapackage 2>&1 | tee $LOGS_DIR/$DEVICE-ROM-$DATE.log
} # buildROM

function uploadROM {
	# Get latest ROM
	ROM_FILE=`ls -t out/target/product/$DEVICE/*$DEVICE*.zip | head -n 1`
	ROM_NAME=`cd out/target/product/$DEVICE/ && ls -t *$DEVICE*.zip | head -n 1`
	echoStatus "Uploading $ROM_NAME to AFH"

	sshpass -p $AFH_PASS scp -o StrictHostKeyChecking=no $ROM_FILE $AFH_USER@$AFH_SERVER:/
	
	# Pushbullet notify upload is complete
	pb -s "ROM for $DEVICE uploaded to AndroidFileHost" "$ROM_NAME MD5: `md5sum $ROM_FILE | cut -d" " -f1`"
} # uploadROM

function verifyROM() {	
	if [ -e $LOGS_DIR/$DEVICE-ROM-$DATE.log ] && tail $LOGS_DIR/$DEVICE-ROM-$DATE.log | grep -q "make completed successfully"; then
		# Send alert
		pbSuccessMsg "ROM"
		if [[ $RELEASE == 1 ]]; then
			# Copy latest ota and target-files to repository
			echoGreen "Copying OTA to repository"
			cp `ls -t out/target/product/$DEVICE/*$DEVICE*.zip | head -1` $OUT_DIR
		fi
		return 0
	fi
	pbErrorMsg "ROM" "Building"
	exit 1
} # verifyROM

function buildKernel {
	echoStatus "Starting Kernel build"
	lunch cm_$DEVICE-userdebug >/dev/null 2>&1
	mka bootzip 2>&1 | tee $LOGS_DIR/$DEVICE-Kernel-$DATE.log
} # buildKernel

function uploadKernel {
	# Get latest Kernel
	KERNEL_FILE=`ls -t out/target/product/$DEVICE/*jflte-kernel*.zip | head -n 1`
	KERNEL_NAME=`cd out/target/product/$DEVICE/ && ls -t *jflte-kernel*.zip | head -n 1`

	echoStatus "Uploading $KERNEL_NAME to AFH"
	
	sshpass -p $AFH_PASS scp -o StrictHostKeyChecking=no $KERNEL_FILE $AFH_USER@$AFH_SERVER:/

	# Pushbullet notify upload is complete
	pb -s "Kernel for $DEVICE uploaded to AndroidFileHost" "$KERNEL_NAME MD5: `md5sum $KERNEL_FILE | cut -d" " -f1`"
} # uploadKernel

function verifyKernel {
	if [ -e $LOGS_DIR/$DEVICE-$DATE.log ] && tail $LOGS_DIR/$DEVICE-Kernel-$DATE.log | grep -q "make completed successfully"; then
		# Send alert
		pbSuccessMsg "Kernel"
		if [[ $RELEASE == 1 ]]; then
			# Copy latest Kernel to repository
			echoGreen "Copying Kernel to repository"
			cp `ls -t out/target/product/$DEVICE/*jflte-kernel*.zip | head -1` $OUT_DIR
		fi
		return 0
	fi
	pbErrorMsg "Kernel" "Building"
	exit 1
} # verifyKernel

#
# Trap handling
#
trap ctrl_c INT
function ctrl_c() {
	echoRed "** User aborted!!!"
	pb -s "User aborted during $DEVICE build!"
	exit 1
}

#
# BEGIN SCRIPT
#
while read -p "Build ROM, Kernel or Both?" cchoice
do
	echo "Say rom, kernel or both"
	case "$cchoice"
		both ) KERNEL=1; ROM=1; break;;
		kernel ) KERNEL=1; break;;
		rom ) ROM=1; break;;
		* ) echoRed "Invalid choice"
	esac
done

while read -p "Build GSM, CDMA or both?" cchoice
do
	echo "Say gsm, cdma or both: "
	case "$cchoice"
		both ) CDMA=1; GSM=1; break;;
		cdma ) CDMA=1; break;;
		gsm ) GSM=1; break;;
		* ) echoGreen "Invalid option"
	esac
done

while read -p "Sync source?" cchoice
do
	echo "Say yes (default no): "
	case "$cchoice"
		y|yes ) SYNC=1; break;;
		* ) echoGreen "No sync"; break;;
	esac
done

while read -p "Full wipe?" cchoice
do
	echo "Say yes (default no)"
	case "$cchoice"
		y|yes ) WIPE=1; break;;
		* ) echoGreen "No wipe"; break;;
	esac
done

while read -p "Copy to OTA repository?" cchoice
do
	echo "Say yes (default no): "
	case "$cchoice"
		y|yes ) RELEASE=1; break;;
		* ) echoGreen "Skipping OTA repo copy"; break;;
	esac
done

while read -p "Upload to AFH?" cchoice
do
	echo "Say yes (default no): "
	case "$cchoice"
		y|yes ) AFH=1; break;;
		* ) echoGreen "Skipping AFH upload"; break;;
	esac
done

#
# Begin build script
#
if [[ $ROM == 1 || $KERNEL == 1 ]]; then
	setEnv
else
	echoRed "Not building ROM or kernel, one choice must be selected"
	exit 1 
fi

if [[ $SYNC == 1 ]]; then
	syncTree
fi

if [[ $WIPE == 1 ]]; then 
	wipeTree
fi

if [[ $ROM == 1 ]]; then
	if [[ $GSM == 1 ]]; then
		DEVICE=jfltegsm
		START=$(date +%s.%N)
		pbBeginMsg "ROM"
		buildROM
		verifyROM
		if [[ $AFH == 1 ]]; then
			uploadROM
		fi
	fi

	if [[ $CDMA == 1 ]]; then
		DEVICE=jfltecdma
		START=$(date +%s.%N)
		pbBeginMsg "ROM"
		buildROM
		verifyROM
		if [[ $AFH == 1 ]]; then
			uploadROM
		fi
	fi
fi

if [[ $KERNEL == 1 ]]; then
	DEVICE=jfltegsm
	START=$(date +%s.%N)
	buildKernel
	verifyKernel
	if [[ $AFH == 1 ]]; then
		uploadKernel
	fi
fi
